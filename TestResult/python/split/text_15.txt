reply

dimgl 16 hours ago | parent | next [–]

        • Inspire the team and younger devs to avoid complex tools and solutions and stick to the basics
        • Balancing everyday and urgent business needs while leading towards a more simple, boring and
          maintainable system.

        • Trying to persuade people to avoid technical debt at all costs

This is literally my job everyday now as a principal. I enjoy it, but it's quite grueling, tbh.

reply

discussDev 14 hours ago | parent | prev | next [–]

This is what an architect should be doing. Too often people are made architects that never had to maintain a system more
then a few years if that and aligning new tech for every problem until you end up with an unworkable, inconsistant, mess
that can't be easily estimated. reply

throw1234651234 17 hours ago | parent | prev | next [–]

"Studying a lot of books, articles, codebases and discussions on software architecture" - like what? 90% of it is "write
clean code", "put in a cache", "normalize your db", "use a queue if the service is really spotty/unreliable". "Fundamentals
of Software Architecture" is 95% fluff. So is "Clean Architecture". Most patterns like CQRS, DDD, fully event-driven
etc are complete overkill and a sign of a BAD architect unless there is a real cause for it. 90% of the job is NOT
overcomplicating.

"Trying to persuade people to avoid technical debt at all costs" - put in a linter and concrete rules (even if a rule is loose,
note that in writing) or devs will get upset and think you are singling them out.

reply

nrawe 13 hours ago | root | parent | next [–]

Those approaches are not “fluff” or overly complicated if the problem-space warrants them. There are of course limits. If
you want to write a script for use once or twice, worrying about coupling and cohesion is probably not worth your time.
If you are building a system to last 2-5 years out, it absolutely is worthwhile.

If you have a dead simple CRUD problem with very little business rules/operations then DDD isn’t right either. But if
you have a complex set of interactions, state, and policies it’s the right call. (The big red book of ddd has a great table on
exactly this)

But there are problems out there that are suitable to those approaches. The devil is in the detail; unfortunately a lot of
strategic design goes by the wayside to cargo-cult zeal.

But the same can be said for the other way of thinking. I’ve worked/work with engineers who think any form of
abstraction is abhorrent and that they don’t need to care about quality because they’ll delete it all and start again (they’ve
not tended to care about the opportunity cost of that to their employer, either). Any database interaction looks like
ActiveRecord and all technology choices are immutable.

The key in all things is balance. What is simple vs overwrought is almost entirely down to what the framing of the
problem is.

reply

lexx 17 hours ago | root | parent | prev | next [–]

Also, I agree with you about over-complicating with all those patterns. But before I am able to dismiss a solution, I have
to understand it. Trying to keep it simple is hard reply