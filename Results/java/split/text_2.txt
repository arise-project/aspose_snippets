What I can not do, is to actually go and gain a deep understanding of every single language/platform/framework/library
there is, I'm just a human after all.

reply

jvalencia 14 hours ago | root | parent | next [–]

It's probably a good thing if you're not too expert. If you were deep into it, you might be impressed by the choices, but
miss the glaring red flags: e.g. The git repo for this cool API has no adoption, no stars, no commits in the last 6 months,
etc. reply

atom_arranger 16 hours ago | root | parent | prev | next [–]

   • Keep your code reasonably clean
   • Use strong typing
   • Make sure your tests don't test implementation details if possible
        ◦ e.g. using more integration like tests written with react-testing-library
        ◦ e.g. using visual regression tests
   • If you sense something is off about the tech stack make a POC of partially migrating to something else as soon as
     possible
   • If the thing you tried is better come up with a plan to migrate and do it as soon as possible
   • If you've followed all the bullet points above then switching to a better solution shouldn't be that difficult That's
     how I try to deal with it. Also if you're not sure which thing is better do POCs with both solutions. Alternatively if
     you're working on a greenfield project and a week in things don't feel right don't be afraid to try rewriting it with
     one of the alternatives you were considering, it'll be a slight hit to productivity for a day or two but it'll pay off
     long term. By following these guidelines I've never felt on a project that I've painted myself into a corner with the
     tech stack, or chosen something very bad that is not reversible.

reply

mickeyp 17 hours ago | root | parent | prev | next [–]

That ecosystem moves very fast and... reinvents itself all the time. Here's another way of looking at that problem:

How many of those tools and technologies existed 1, 3, 5, 10 years ago?

Would you trust a six month-old tool on github to form the nucleus of your -- probably mundane, in the good way! --
project? Would you risk it all for the chance to have a slightly different way of rendering CSS or generating HTML?

... I didn't think so. React's been around for a long time now and it's got a lot of momentum and people who know it. So
that's a pretty safe bet. Rinse and repeat.

Not all tools are critical and you do have some leeway. But when in doubt, pick something you can easily hire people to
help you accomplish; that has been around a while; and that feels established.

reply

azangru 16 hours ago | root | parent | next [–]

     React's been around for a long time now and it's got a lot of momentum and people who know it. That was
     true for jQuery as well; and yet, it is clearly no longer the right thing (tm) to choose for a project. Not
     because it's no longer cool; but because the underlying technology — the web browser — has gotten so
     much better it is no longer relevant.

Same fate may await React. At least, with jQuery it's pretty straightforward to gradually wean oneself off of it. I don't
know how firmly we are going to be stuck with React when its time comes.